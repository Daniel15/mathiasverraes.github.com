<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.3.2" created="2012-10-29 12:15" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>The Hollywood Principle</title>
	<link>http://blog.verraes.net</link>
	<description>Mathias Verraes&#039; blog about software development</description>
	<pubDate>Mon, 29 Oct 2012 12:15:20 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://blog.verraes.net</wp:base_site_url>
	<wp:base_blog_url>http://blog.verraes.net</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>mathias</wp:author_login><wp:author_email>mathias@verraes.net</wp:author_email><wp:author_display_name><![CDATA[Mathias Verraes]]></wp:author_display_name><wp:author_first_name><![CDATA[Mathias]]></wp:author_first_name><wp:author_last_name><![CDATA[Verraes]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>blogging</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Blogging]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>software-development</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Software development]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>agile</wp:tag_slug><wp:tag_name><![CDATA[agile]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>best-practice</wp:tag_slug><wp:tag_name><![CDATA[best practice]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>5</wp:term_id><wp:tag_slug>blogging-2</wp:tag_slug><wp:tag_name><![CDATA[blogging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>change</wp:tag_slug><wp:tag_name><![CDATA[change]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>code-quality</wp:tag_slug><wp:tag_name><![CDATA[code quality]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>ddd</wp:tag_slug><wp:tag_name><![CDATA[ddd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>design-patterns</wp:tag_slug><wp:tag_name><![CDATA[design patterns]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>doctrine2</wp:tag_slug><wp:tag_name><![CDATA[doctrine2]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[git]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>money</wp:tag_slug><wp:tag_name><![CDATA[money]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>oop</wp:tag_slug><wp:tag_name><![CDATA[oop]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>php</wp:tag_slug><wp:tag_name><![CDATA[php]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>phpunit</wp:tag_slug><wp:tag_name><![CDATA[phpunit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>refactoring</wp:tag_slug><wp:tag_name><![CDATA[refactoring]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>svn</wp:tag_slug><wp:tag_name><![CDATA[svn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>tdd</wp:tag_slug><wp:tag_name><![CDATA[tdd]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.3.2</generator>

	<item>
		<title>cropped-Emile_Claus.jpg</title>
		<link>http://blog.verraes.net/?attachment_id=4</link>
		<pubDate>Sat, 12 Mar 2011 16:34:40 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/wp-content/uploads/2011/03/cropped-Emile_Claus.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://blog.verraes.net/wp-content/uploads/2011/03/cropped-Emile_Claus.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2011-03-12 17:34:40</wp:post_date>
		<wp:post_date_gmt>2011-03-12 16:34:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cropped-emile_claus-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.verraes.net/wp-content/uploads/2011/03/cropped-Emile_Claus.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/03/cropped-Emile_Claus.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"940";s:6:"height";s:3:"198";s:14:"hwstring_small";s:23:"height='26' width='128'";s:4:"file";s:31:"2011/03/cropped-Emile_Claus.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"cropped-Emile_Claus-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"cropped-Emile_Claus-300x63.jpg";s:5:"width";s:3:"300";s:6:"height";s:2:"63";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Hollywood Principle</title>
		<link>http://blog.verraes.net/2011/03/the-hollywood-principle/</link>
		<pubDate>Sat, 12 Mar 2011 17:04:59 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=7</guid>
		<description></description>
		<content:encoded><![CDATA[Here's my new blog. I've been postponing it for nine months, because of these recognisable bumps in the road:
<ul>
	<li>I wanted a cool design</li>
	<li>I wanted to use some cool new app that stores the posts on GitHub</li>
	<li>I wanted to write my own blog app in a framework or language I haven't tried yet</li>
	<li>I wanted to write a bunch of blog posts before I start publishing them</li>
</ul>
So I ended up using WordPress, with the stock template, no pre-written posts, and an Emile Claus painting.

The Hollywood Principle is a methodology in Object Oriented design: "Don't call us, we'll call you". I choose after reading <a title="A language for Hollywood and Value Objects" href="https://groups.google.com/d/topic/growing-object-oriented-software/7_fRrAjNBao/discussion">an interesting discussion</a> on the GOOS mailing list, which accompanies the book I'm reading: <a title="Growing Object-Oriented Software Guided by Tests" href="http://www.growing-object-oriented-software.com/">Growing Object-Oriented Software Guided by Tests</a> by Steve Freeman and Nat Pryce.

So that should give you a clue: I intend to blog about OOP, quality assurance, continuous integration, but also PHP, the web, and, as blogs go, anything that comes to mind. Wish me luck.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2011-03-12 18:04:59</wp:post_date>
		<wp:post_date_gmt>2011-03-12 17:04:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-hollywood-principle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="blogging"><![CDATA[Blogging]]></category>
		<category domain="post_tag" nicename="blogging-2"><![CDATA[blogging]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[261174302]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Torkil Johnsen]]></wp:comment_author>
			<wp:comment_author_email>torkil.johnsen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://torkiljohnsen.com</wp:comment_author_url>
			<wp:comment_author_IP>80.89.35.67</wp:comment_author_IP>
			<wp:comment_date>2011-03-23 13:09:32</wp:comment_date>
			<wp:comment_date_gmt>2011-03-23 12:09:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What is the cool new app that stores posts on GitHub?

And yes: Good luck! (subscribed to your blog now)

PS: I just read the "blogroll" and laughed so hard it scared my co-workers.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[170121011]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Mathias Verraes]]></wp:comment_author>
			<wp:comment_author_email>mathias@verraes.net</wp:comment_author_email>
			<wp:comment_author_url>http://mathias.verraes.net</wp:comment_author_url>
			<wp:comment_author_IP>91.181.131.66</wp:comment_author_IP>
			<wp:comment_date>2011-03-23 14:00:08</wp:comment_date>
			<wp:comment_date_gmt>2011-03-23 13:00:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks :-)

The code samples use https://gist.github.com/, which is like Pastie ea. but each Gist is a git repo.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[170121011]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[170121012]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Torkil Johnsen]]></wp:comment_author>
			<wp:comment_author_email>torkil.johnsen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://torkiljohnsen.com</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-03-25 20:02:00</wp:comment_date>
			<wp:comment_date_gmt>2011-03-25 20:02:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I noticed, thought you had your posts' text on GitHub :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>4</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[170121012]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[171896754]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Mathias Verraes]]></wp:comment_author>
			<wp:comment_author_email>mathias@verraes.net</wp:comment_author_email>
			<wp:comment_author_url>http://mathiasverraes.com</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-03-29 17:29:00</wp:comment_date>
			<wp:comment_date_gmt>2011-03-29 17:29:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No it's just a classic WP blog. I did plan on looking into https://github.com/elliottcable/git-blog, which does in fact allow you to simply push your posts to a git repo, and I think there are other similar apps.  ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>9</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[171896754]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[174186518]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Interface discovery with PHPUnit’s Mock objects</title>
		<link>http://blog.verraes.net/2011/03/interface-discovery-with-phpunit-mock-objects/</link>
		<pubDate>Mon, 21 Mar 2011 14:16:13 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://github.com/sebastianbergmann/phpunit/">PHPUnit</a> provides some great features to create <a href="http://en.wikipedia.org/wiki/Mock_object">mock objects</a>. The idea is that when you are testing code that depends on another class, you provide the object with a mock instance of that class, instead of a real object. That way, you are making sure that your test will only fail if the system under test is broken, and not if one of it’s dependencies is broken. You could simply write a mock class and instantiate it, but PHPUnit can generate them for you.

The PHPUnit documentation doesn’t explicitly state this, but you can also create mock objects from interfaces. This makes a lot of sense if you think about it. In many cases, you should actually use mocked interfaces in your tests instead of mocked concrete classes. After all, the interface is the contract by which classes agree to talk to the outside world.<!--more-->
<h2>A simple example</h2>
Let’s write some code, in true <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> style. Let’s say we want to post to Twitter whenever someone deposits money in our bank account. We don’t want the test to actually send out tweets. In fact, we haven’t even thought about what our Twitter class will look like. This is our test:

[gist]<script src="https://gist.github.com/879470.js?file=BankAccountTest1.php"></script>[/gist] Running this test fails, as we haven’t got a BankAccount class yet.

<pre>PHP Fatal error:  Class 'BankAccount' not found</pre>

Let’s add it:  [gist]<script src="https://gist.github.com/879470.js?file=BankAccount1.php"></script>[/gist]

The test now succeeds, for the simple reason we are not really testing anything. Let’s make sure that BankAccount::deposit() actually sends out a tweet. We do this by telling the mock to expect a call to it’s tweet() method.
[gist]<script src="https://gist.github.com/879470.js?file=BankAccountTest2.php"></script>[/gist] The test fails with the following message:

<pre>1) BankAccountTest::testSendEmailWhenReceivingMoney
Expectation failed for method name is equal to &lt;string:tweet&gt; 
when invoked 1 time(s)
Method was expected to be called 1 times, actually called 0 times.</pre>

Let’s add some code that calls tweet() to our deposit() method.  [gist]<script src="https://gist.github.com/879470.js?file=BankAccount2.php"></script>[/gist]

We get a new error:
<pre>PHP Fatal error:
Call to undefined method Mock_Twitter_28053312::tweet()</pre>
Mock_Twitter_28053312 is the class that PHPUnit generated based on the Twitter interface, which we haven’t written yet. The good news is that by now, we have discovered what the interface should look like:

[gist]<script src="https://gist.github.com/879470.js?file=Twitter.php"></script>[/gist]
<h2>Conclusion</h2>
The whole point of this technique, is that we have now written BankAccount, without worrying how our Twitter implementation will work. In the process, we discovered that we will need an implementation of a Twitter interface, and we discovered what that interface looks like.

Later on, we probably build a RESTfulTwitter implements Twitter, which would post messages using the Twitter REST API. If we had build the Twitter implementation first, we’d probably would have been tempted to add all kinds of features that we thought we might need. Instead of that, we discovered what we actually needed. Our test proves that our code adheres to <a title="ou ain't gonna need it" href="http://en.wikipedia.org/wiki/You_ain't_gonna_need_it">YAGNI</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2011-03-21 15:16:13</wp:post_date>
		<wp:post_date_gmt>2011-03-21 14:16:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interface-discovery-with-phpunit-mock-objects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="phpunit"><![CDATA[phpunit]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software development]]></category>
		<category domain="post_tag" nicename="tdd"><![CDATA[tdd]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[261176744]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Keep your controllers thin with Doctrine2</title>
		<link>http://blog.verraes.net/2011/03/keep-you-controllers-thin-with-doctrine2/</link>
		<pubDate>Wed, 23 Mar 2011 10:35:31 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=29</guid>
		<description></description>
		<content:encoded><![CDATA[Doctrine2 does such a nice job abstracting everything related to the database, that you might be tempted to do everything else in your controllers. Say we have a Bug entity:

[gist]<script src="https://gist.github.com/882898.js?file=thincontrollers1.php"></script>[/gist]
 
To get a list of fixed bugs, we get the Bug repository from the EntityManager and ask for a list of Bugs where status equals ‘fixed’.  [gist]<script src="https://gist.github.com/882898.js?file=thincontrollers2.php"></script>[/gist]

That’s easy enough. Surely there can be no harm in having this code inside a controller? Although this code doesn’t look like one, it is in a fact a database query. It’s a shortcut for this:

[gist]<script src="https://gist.github.com/882898.js?file=thincontrollers3.php"></script>[/gist]
 
Having a query in our controller should ring some serious alarm bells. It means that despite all abstraction Doctrine2 provides, we are at this point still coupling the controller to the database. If one day we decide to change how bug status is represented in the database, we’d need to modify all our controllers.

<!--more-->Let’s have a closer look at the Repository. <a title="Domain Driven Design" href="http://domaindrivendesign.org/books/evans_2003">Evans</a> defines it as “an object that can provide the illusion of an in-memory collection of all objects of that type”, that clients talk to using the domain language. In other words, findBy(array(‘status’ =&gt; ‘fixed’)) is too generic: in domain language, we want to ask the repository to findAllFixedBugs(). If the database schema changes, we’ll only have to change that method.  Luckily Doctrine2’s repositories can be extended:  [gist]<script src="https://gist.github.com/882898.js?file=thincontrollers4.php"></script>[/gist]

Finally we can replace the code in our controller with this

[gist]<script src="https://gist.github.com/882898.js?file=thincontrollers5.php"></script>[/gist]

Our controller is now decoupled from the database. As an added bonus, the code does a much better job of communicating it’s intent than our first version ever could.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2011-03-23 11:35:31</wp:post_date>
		<wp:post_date_gmt>2011-03-23 10:35:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>keep-you-controllers-thin-with-doctrine2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ddd"><![CDATA[ddd]]></category>
		<category domain="post_tag" nicename="doctrine2"><![CDATA[doctrine2]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[261174344]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Torkil Johnsen]]></wp:comment_author>
			<wp:comment_author_email>torkil.johnsen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://torkiljohnsen.com</wp:comment_author_url>
			<wp:comment_author_IP>80.89.35.67</wp:comment_author_IP>
			<wp:comment_date>2011-03-23 13:06:38</wp:comment_date>
			<wp:comment_date_gmt>2011-03-23 12:06:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks extremely nifty, but left me with questions. I'm not familiar with Doctrine, and you probably just wrote this as a crude example, so forgive the silly question! :)

I'm wondering why you write something as specific as findAllFixedBugs()? Seems to me like you'll need a findAllFixedBugsFilteredByUser() and findAllFixedBugsWithStatusCritical() around the next bend?

And why did you not use findBy() in your final version of the method, but instead write a regular SQL statement?

Other than that: Step up the pace on the blog posts, we need more of these :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[170121036]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Alessandro Nadalin]]></wp:comment_author>
			<wp:comment_author_email>alessandro.nadalin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.odino.org</wp:comment_author_url>
			<wp:comment_author_IP>93.57.82.58</wp:comment_author_IP>
			<wp:comment_date>2011-03-23 14:42:31</wp:comment_date>
			<wp:comment_date_gmt>2011-03-23 13:42:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Torkil,

yes, the repository patterns was specifically  born to incapsulate all the methods you need to retrieve objects from the DB.
So you basically add there all the possible queries you need in your application...

You are obviously able to abstract some methods using a custom class between your repositories and the EntityRepository, which inherits from the latter.

To use OO api and not raw DQL statements you need a QueryBuilder instance:
https://gist.github.com/883091

ciao!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[170121038]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Mathias Verraes]]></wp:comment_author>
			<wp:comment_author_email>mathias@verraes.net</wp:comment_author_email>
			<wp:comment_author_url>http://mathias.verraes.net</wp:comment_author_url>
			<wp:comment_author_IP>91.181.131.66</wp:comment_author_IP>
			<wp:comment_date>2011-03-23 15:10:04</wp:comment_date>
			<wp:comment_date_gmt>2011-03-23 14:10:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's indeed a crude example. 

You would indeed need more methods, which you would discover as you write tests (see my previous post). The point of having these methods is that your code is speaking the same language as you speak with your customer (called 'ubiquitous language' in DDD). If you decide to move your bugs from a relational database to, say, a remote service, your methods would still be there, but the implementation would be entirely different. And of course, you can easily replace BugRepository with a mock object during testing, so you wouldn't need a database to test your controller.

There's no particular reason I didn't use findBy() in the last snippet, except that I wanted to illustrate that the method can contain complex queries that can't be done with find by.

Off topic: the queries in the example are DQL, not SQL. http://www.doctrine-project.org/docs/orm/2.0/en/reference/dql-doctrine-query-language.html]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[170121040]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Torkil Johnsen]]></wp:comment_author>
			<wp:comment_author_email>torkil.johnsen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://torkiljohnsen.com</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-03-23 22:20:00</wp:comment_date>
			<wp:comment_date_gmt>2011-03-23 22:20:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks to you both, enlightening!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[170476113]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Accessing private properties from other instances</title>
		<link>http://blog.verraes.net/2011/03/accessing-private-properties-from-other-instances/</link>
		<pubDate>Thu, 24 Mar 2011 17:38:42 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=55</guid>
		<description></description>
		<content:encoded><![CDATA[In PHP, when a property or method is marked private, it can only be accessed from within that class. That includes <strong>other instances of the same class</strong>. This may seem counter-intuitive at first, because we are used to dealing with instances of classes. The visibility operator however works not on object-level, but on class level.

An example:<!--more-->

[gist]<script src="https://gist.github.com/885448.js?file=private_properties1.php"></script>[/gist]

This should make it clear that both instances of Foo have access to each other's private properties.

What practical use does this have? A great candidate for this are <a href="http://domaindrivendesign.org/node/135" title="Value Objects">Value Objects</a>. If we want to make sure that to separate instances of Foo are actually equal, we can easily compare their private properties:

[gist]<script src="https://gist.github.com/885448.js?file=private_properties2.php"></script>[/gist]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date>2011-03-24 18:38:42</wp:post_date>
		<wp:post_date_gmt>2011-03-24 17:38:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>accessing-private-properties-from-other-instances</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="oop"><![CDATA[oop]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[262190533]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Jonathan Mayhak]]></wp:comment_author>
			<wp:comment_author_email>jmayhak@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://profiles.google.com/jmayhak</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-03 18:57:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-03 18:57:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good info. Had no idea php worked like this.

Also, great use case....very practical!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[196481975]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[N. Dionysopoulos]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/nikosdion</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-03-24 18:00:00</wp:comment_date>
			<wp:comment_date_gmt>2011-03-24 18:00:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice info, Mattias! It's very counter-intuitive indeed. On the other OO languages I know of (Delphi, various .NET dialects) a private variable is inaccessible outside the context of the owner object instance.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[171137563]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[Lolol]]></wp:comment_author>
			<wp:comment_author_email>lolol@mailinator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-05 13:39:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-05 13:39:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is also the case in Java, which i found rather awkward when i found it.. but apparently it has some use. kind of takes away the principle behind private if you can extend a class to create functions to read another instance of that base class` privates :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[278309525]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Random thoughts on using Git</title>
		<link>http://blog.verraes.net/2011/03/git-vs-svn/</link>
		<pubDate>Tue, 29 Mar 2011 17:36:50 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[A couple of weeks ago, I switched from Subversion to Git for a couple of smaller projects. Below are some of my findings.
<h2>Switching from Subversion</h2>
Git is a little harder to understand than Subversion, because of it’s lack of a centralized repository, and because it has more concepts you need to understand. But if you already understand SVN well, it’s very manageable. I’ve no idea how the learning curve compares to SVN for a complete newbie to version control.

If you are on the fence, there are two things that I wish I knew about sooner:<!--more-->
<ul>
	<li><a href="http://gitimmersion.com/">Git Immersion</a> only takes an hour or so, but you’ll understand so much more of git than when using conventional books or tutorials.</li>
	<li><a href="http://help.github.com/svn-importing/">Migrating an SVN repo to git</a> is dead easy.</li>
</ul>
<h2>Open source community</h2>
GitHub alone is plenty of reason to switch to Git. It seems like the whole PHP community (and the whole open source community) are moving to GitHub. And you can’t blame them. GitHub works really, really well. It makes it easy to maintain your own fork of a project, make changes and send them as pull requests. Symfony2 for example noticed a huge increase in contributions since the move.

Even if you only consume open source code and don’t plan on contributing patches, you’ll find you need to understand at least how cloning and pulling work, so you can easily download code.
<h2>Svn:externals</h2>
I usually include third party libraries in my projects using svn:externals. At the moment, a lot of PHP libraries that switched to git, still sync to SVN. But I’m sure that people will stop bothering with that. That’s a problem if your SVN repository depends externals. You could set up your own syncing, or take the hint and move to git.
<h2>Fixing ‘oops’ moments</h2>
With SVN, commits are pretty much written in stone. Because of that, a convention has emerged:
<ul>
	<li>Faulty commits are followed by a commit labeled ‘reverted rev 123’</li>
	<li>Incomplete commits are followed by a commit with the same message</li>
</ul>
Git has a lot more possibilities to fix errors, amend to commits, etc. That’s a blessing and a curse. I find that by trying to make my history look pretty, I seem to make a mess of things. It’s not a big deal, because in Git, nothing is ever lost. Perhaps it’s just my lack of experience with git. In any case, I think that for now, I will stick to the SVN convention and won’t try to hide my clumsiness from the world.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2011-03-29 19:36:50</wp:post_date>
		<wp:post_date_gmt>2011-03-29 17:36:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-vs-svn</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software development]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[svn]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[266036330]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Representing Money in PHP, Fowler-style</title>
		<link>http://blog.verraes.net/2011/04/fowler-money-pattern-in-php/</link>
		<pubDate>Mon, 04 Apr 2011 19:46:35 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=67</guid>
		<description></description>
		<content:encoded><![CDATA[Whenever working with values in object oriented programming, it's often a good idea to wrap them in a ValueObject. Money is a perfect candidate for a ValueObject: When talking about money, numbers are meaningless if they are not combined with a currency.

I've been using a very simple version of the Money pattern as described in <a title="Martin Fowler Books" href="http://martinfowler.com/books.html">Martin Fowler's PoEAA</a>. I couldn't find a PHP implementation anywhere, so I decided to make my own little open source library for it. You can find it on <a title="Fowler's Money in PHP" href="https://github.com/mathiasverraes/money">my GitHub account</a> (where else?).
<h2>Immutability</h2>
An important aspect of ValueObjects is their immutability:<!--more-->

Let's say Jim and Hannah both want to buy a copy of book priced at EUR 25.
<code>$jim_price = $hannah_price = new Money(2500, new Euro);</code>

Jim has a coupon for EUR 5.
<code>$coupon = new Money(500, new Euro);
$jim_price-&gt;subtract($coupon);</code>

Because <code>$jim_price</code> and <code>$hannah_price</code> are the same object, you'd expect Hannah to now have the reduced price as well. To prevent this problem, Money objects are immutable. With the code above, both <code>$jim_price</code> and <code>$hannah_price</code> are still EUR 25:

<code>$jim_price-&gt;equals($hannah_price); // true</code>

The correct way of doing operations is:

<code>$jim_price = $jim_price-&gt;subtract($coupon);
$jim_price-&gt;lessThan($hannah_price); // true
$jim_price-&gt;equals(Money::euro(2000)); // true</code>
<h2>Allocation</h2>
My company made a whopping profit of 5 cents, which has to be divided amongst myself (70%) and my investor (30%). Cents can't be divided, so I can't give 3.5 and 1.5 cents. If I round up, I get 4 cents, the investor gets 2, which means I need to conjure up an additional cent. Rounding down to 3 and 1 cent leaves me 1 cent. Apart from re-investing that cent in the company, the best solution is to keep handing out the remainder until all money is spent. In other words:

<code>$profit = new Money(5, new Euro);
list($my_cut, $investors_cut) = $profit-&gt;allocate(70, 30);</code>

Now <code>$my_cut</code> is 4 cents, and <code>$investors_cut</code> is 1 cent. The order in which you allocate the the money is important:

<code>list($investors_cut, $my_cut) = $profit-&gt;allocate(30, 70);</code>
Now <code>$my_cut</code> is 3 cents, and <code>$investors_cut</code> is 2 cents.
<h2>Conclusion</h2>
At the moment my Money class has all the features that Fowler lists. You can see some more example by looking at the <a href="https://github.com/mathiasverraes/money/tree/master/tests">unit tests</a>. I hope to add a lot stuff more if time permits: currency conversion, parsing of strings like '$2.00' and 'USD 2.00', dealing with major units and subunits in currencies, etc. In any case, I hope it's useful to somebody in it's present form.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2011-04-04 21:46:35</wp:post_date>
		<wp:post_date_gmt>2011-04-04 19:46:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fowler-money-pattern-in-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ddd"><![CDATA[ddd]]></category>
		<category domain="post_tag" nicename="design-patterns"><![CDATA[design patterns]]></category>
		<category domain="post_tag" nicename="money"><![CDATA[money]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[270979936]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fowler-money-patter-in-php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Beautiful code</title>
		<link>http://blog.verraes.net/2011/04/beautiful-code/</link>
		<pubDate>Tue, 05 Apr 2011 21:50:26 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=76</guid>
		<description></description>
		<content:encoded><![CDATA[Jenkins/Hudson, the tool that has helped so many teams write better software, <a href="http://gojko.net/2011/04/05/how-is-it-even-possible-code-to-be-this-bad/">turns out to be rather ugly</a>. And Santa is a fat drunk guy in a suit.

Code doesn’t have to be beautiful. Some of the most successful projects have the ugliest code. Marketing, features, vendor lock-in, shiny GUI’s and all kinds of real or imagined qualities are what make or break a software product. Of all the factors that’ll make you reach your audience, beautiful code dangles somewhere at the bottom. The business value of beautiful code is near zero. CEO’s, managers, customers, and users, they don’t give a shit about the code. So neither should we. Just keep pumping out those LOC’s.<!--more-->

But we do care. All good programmers care about beautiful code. A well-crafted code base makes us happy to go to work every day. It makes us confident that anything they’ll throw at us, can be handled with grace.

And even if the code isn’t there yet, just having the opportunity to improve it gives us energy. Making all kinds of small, hardly visible changes, and over time seeing how all the wrinkles and hiccups disappear, is like watching natural evolution produce the perfect flower.

A last-minute change request from a customer is no problem for beautiful code. We welcome it as a chance to prove that the painstaking refactoring was worth it. We’re thrilled at how ridiculously easy it has become to respond to change.

The world is littered with garbage. So let’s pick up the trash in our own neighbourhood. Leave every piece of code behind a little cleaner than you found it. Beautiful code does make a difference.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2011-04-05 23:50:26</wp:post_date>
		<wp:post_date_gmt>2011-04-05 21:50:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beautiful-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-quality"><![CDATA[code quality]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[271994632]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ubiquitous Language</title>
		<link>http://blog.verraes.net/2011/05/ubiquitous-language/</link>
		<pubDate>Thu, 12 May 2011 10:45:29 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=82</guid>
		<description></description>
		<content:encoded><![CDATA[Customers usually have never been forced to really think about their domain in a structured way -- let alone explain it in detail to a developer, who doesn’t know anything about that domain. Often the customer doesn’t have a set of clear definitions for the concepts his business uses daily, or has multiple terms for the same concepts.

Developers are even worse. They also tend to have vague concepts and lots of ways to name the same thing. Depending on where you look in the code or the documentation (if any), you might see: “bank account”, “account”, “bank_account”, “bankAccount”, “BankAccount”. And worse: “BA”, “bank_acc”, “acnt”. When storage is involved, you’ll find “item”, “row”, “record”, “model”. And another set of words for a collection of bank accounts: “list”, “array”, “collection”, “bankaccounts”, “acntset”, … you get the picture.

Even on small projects, this hinders communication. Developers, project managers, customers, and others involved with the project, need to communicate about the domain, but everybody uses a different, but equally vague terminology.<!--more-->
<h3>A common language</h3>
The overcome this, you should start building a ubiquitous language, from the moment you start talking to the customer. Use a single term for a single concept, be it a thing, a relationship, or a behavior. Use the exact same term in the code, in the documentation, and in speech, and give it a strict spelling, down to the capitalization. Always “BankAccount”, never “bank account”. Don’t use abbreviations, as they make everything harder to read (except for really common ones, like “ISBN”).

You need to be disciplined about it, and expect the same from everybody involved: correct the customer when he uses a different word, fix the spelling when someone writes it down incorrectly, and change other’s code. Some people might get annoyed at first at your insistence, but they will soon get comfortable with using the language.

Maintain this ubiquitous language throughout the project. When concepts change, or your understanding of the domain changes, adjust the language, make sure it is adapted everywhere, and tell everyone.
<h3>Benefits</h3>
You’ll notice that soon, communication between everyone in the project will go much easier. When something is unclear, you can refer to the documentation. For new people on the project, it will be a lot easier to get up to speed. Code becomes easier to read, and easier to understand, as there are less concepts, and they are clearly defined. The application is much less vulnerable to regressions, and changing or refactoring is a breeze.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2011-05-12 12:45:29</wp:post_date>
		<wp:post_date_gmt>2011-05-12 10:45:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ubiquitous-language</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code-quality"><![CDATA[code quality]]></category>
		<category domain="post_tag" nicename="ddd"><![CDATA[ddd]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software development]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[301788854]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Growing Object Oriented Software review</title>
		<link>http://blog.verraes.net/?p=88</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[I finished "<a href="http://growing-object-oriented-software.com/">Growing Object Oriented Software, Guided By Tests</a>" (Steve Freeman &amp; Nat Pryce) a month ago, but I had a <a href="http://twitter.com/#!/mathiasverraes/status/59558570043252736">good excuse</a> for not writing a review right away. The book only talks about OOP theory in a two chapters; the rest is all about Test Driven Development.

It's not a book about the methodology of TDD: there's no endless repetitive chapters telling you]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2011-05-15 20:01:18</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>growing-object-oriented-software-revie</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lazy Loading in PHP with Closures</title>
		<link>http://blog.verraes.net/2011/05/lazy-loading-with-closures/</link>
		<pubDate>Tue, 17 May 2011 19:57:07 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[Closures are a great way to do all kinds of neat tricks in PHP, and they’re particularly useful for  Lazy Loading. I’m currently involved in a +200k SLoC legacy project, and the challenge is moving it to a Domain Driven implementation (while improving the performance), with the ultimate goal of making it more testable.
<h3>The problem</h3>
We want to find a Customer, and ask it for a list of Orders:

[gist]<script src="https://gist.github.com/977230.js?file=listing1.php"></script>[/gist]
  With the ActiveRecord pattern, this is simple. The Customer object holds an instance of the database adapter, and queries it for related Orders:  [gist]<script src="https://gist.github.com/977230.js?file=listing2.php"></script>[/gist]

The downside of ActiveRecord, is that it violates the principle of Separation of Concerns. The Customer class contains domain knowledge (“What is a customer, how does it behave?”), as well as persistence knowledge (“How do we store a customer?”). The Customer class in our example even knows how to find it’s Orders in the database. The tight coupling between Customer and the database makes it less portable, and hard to test.<!--more-->

In DDD, we solve this by keeping the Customer class pure, and move the logic for storing the object to a CustomerRepository. Clients of the Repository don’t know how or where it finds Customers, and the Customer class itself doesn’t know anything about the Repository or the database it is stored in. As for the Orders, they are pushed in the Customer at creation time.

[gist]<script src="https://gist.github.com/977230.js?file=listing3.php"></script>[/gist]  Note that the client code for this example is still the same as in the first snippet.

<h3>Adding Lazy Loading to the mix</h3>

The problem with the previous example is that we always query the database for the Orders, even when we don’t need them. We don’t want to move that query back to the Customer class, but we want to keep our client code intact. The trick is to move the logic for finding Orders into a Closure, push it into the Customer instance, and execute only when we actually need the Orders. In other words, Customer now holds a reference to the Orders, and only dereferences it at the very last moment -- hence the term Lazy Loading.  [gist]<script src="https://gist.github.com/977230.js?file=listing4.php"></script>[/gist]

The client code is still exactly as in the very first code snippet. But this time, when we call getOrders(), the Closure we prepared in find() is executed. It’s self-contained: it has the database instance and the Customer’s id, and it knows what to do. Customer on the other hand has no idea what goes on inside the Closure, but can perfectly deliver on getOrders() calls.
<h3>Conclusion</h3>
Clearly this is a simplified example. My colleague, who has a lot more experience with the project, pointed out a whole bunch of real life use cases where this method would cause an abundance of queries. I'll keep you posted when we figure out how to deal with those.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2011-05-17 21:57:07</wp:post_date>
		<wp:post_date_gmt>2011-05-17 19:57:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lazy-loading-with-closures</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ddd"><![CDATA[ddd]]></category>
		<category domain="post_tag" nicename="design-patterns"><![CDATA[design patterns]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software development]]></category>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[306367077]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Herman Peeren]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/HermanPeeren</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-19 06:45:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-19 06:45:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My idea about Lazy Loading:

The Lazy Loading in this example only is more efficient when the total number of hits to getOrders() is less than the number of customer-objects.  So, it depends on the situation when to use Lazy Loading or not. 

To be able to take this design decision, you need to know in what situations it will be used: the "art" of programming.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[206727837]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Mathias Verraes]]></wp:comment_author>
			<wp:comment_author_email>mathias@verraes.net</wp:comment_author_email>
			<wp:comment_author_url>http://mathiasverraes.com</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-19 06:49:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-19 06:49:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Exactly. I failed to mentioned that normally, you'd use an ORM like Doctrine2 to do this kind of stuff. Unfortunately the project is too large, too complex, and too critical to refactor to Doctrine2 (or at least not in one go).  ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>12</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[206727837]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[206728697]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[Herman Peeren]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/HermanPeeren</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-19 13:41:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-19 13:41:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ But, as far as I know, Doctrine2  ALWAYS uses Lazy Loading. And my point is: there might be situations where that is not the best choice. So, we have a lot of ease of use when using an ORM-framework, but will sometimes get a lack of performance. 

An advantage when you need to program everything yourself, is that you can still take the decision yourself to use Eager or Lazy Loading. As Johan Cruijff (Dutch Ajax Champion) would say: "every disadvantage has it's advantage".]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>13</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[206728697]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[207110949]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[abcphp.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://abcphp.com/story/61156/</wp:comment_author_url>
			<wp:comment_author_IP>174.120.243.162</wp:comment_author_IP>
			<wp:comment_date>2011-05-31 14:33:24</wp:comment_date>
			<wp:comment_date_gmt>2011-05-31 12:33:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>Lazy Loading in PHP with Closures...</strong>

Closures are a great way to do all kinds of neat tricks in PHP, and they’re particularly useful for Lazy Loading. I’m currently involved in a +200k SLoC legacy project, and the challenge is moving it to a Domain Driven implementation (while improvi...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>alessandro.nadalin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-06-08 15:41:00</wp:comment_date>
			<wp:comment_date_gmt>2011-06-08 15:41:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[One of the good things of doctrine 1 was that it used lazy loading by default.
That meant if you didn't want to do N bunch of separated queries you only needed to do a -&gt;leftJoin() when quering a Doctrine_Table (which, conceptually, is similar - but far away - to the repository).

But it was active record... gosh :)

BTW, i'd suggest not to inject the whole instance of the DB abstraction into the closure, but something like a query object ( Doctrine_Query, for instance )

In order to avoid "a whole bunch of real life use cases where this method would cause an abundance of queries" you should not use a -&gt;find(), which should be relation-agnostic, but some other pre-defined methods like: https://gist.github.com/1014682]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[221329511]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[Sim]]></wp:comment_author>
			<wp:comment_author_email>rbtsoutsourcing@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.outsourcing-partners.com/software-developer.html</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-12-05 14:09:00</wp:comment_date>
			<wp:comment_date_gmt>2011-12-05 13:09:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good reviews,  Thank for that bit of information

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[379460000]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Coping with Change in Software Development</title>
		<link>http://blog.verraes.net/2011/07/coping-with-change-in-software-development/</link>
		<pubDate>Thu, 21 Jul 2011 18:19:40 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=102</guid>
		<description></description>
		<content:encoded><![CDATA[In a discussion about keeping developers motivated, someone said:

"I also try as hard as I can to isolate our developers [...] from out-of-spec change requests"

Sticking to the plan sure allows developers and managers to stay in their comfort zone. The project keeps moving forward, the deadlines are met. But we're not in the business of meeting deadlines. We're in the business of building software that delivers value to customers. As the customer gains new insight in what will get the most value, the specs change. <a title="Change is the only constant" href="http://www.google.com/?q=change+is+the+only+constant">And change they will.</a>

The reaction of the software industry has traditionally been to avoid change. Get the customer to sign off on the plan, then stick to it. Make them understand that changes are going to cost them dearly. Shield the developers from change.

The effect is backwards: customers, managers and developers are instilled with a holy fear of change. When, after much resistance, a change becomes inevitable, nobody knows how to deal with it.

Knowing how to cope with change in a software project is a skill like any other, whether it's atomic refactoring, or big architectural changes, or writing the automated tests that will help you keep your sanity in the process.

Like any skill, you can master it with study and practice. Perhaps the best way to learn how to cope with change in software development, is to deliberately introduce change. It would make an interesting experiment: tell your developers to change things, just to keep them alert and well-trained in the art of change. I don't know if they will declare you crazy, or if they will be motivated by it. All I know is that I would.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2011-07-21 20:19:40</wp:post_date>
		<wp:post_date_gmt>2011-07-21 18:19:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>coping-with-change-in-software-development</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agile"><![CDATA[agile]]></category>
		<category domain="post_tag" nicename="change"><![CDATA[change]]></category>
		<category domain="post_tag" nicename="refactoring"><![CDATA[refactoring]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[364506867]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code Folder Structure</title>
		<link>http://blog.verraes.net/2011/10/code-folder-structure/</link>
		<pubDate>Sat, 22 Oct 2011 19:49:57 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/?p=109</guid>
		<description></description>
		<content:encoded><![CDATA[All code bases I ever read or worked with, share a similar folder structure:
<ul>
	<li>Controllers</li>
<ul>
	<li>BlogPostController</li>
	<li>CommentController</li>
</ul>
	<li>Models</li>
<ul>
	<li>BlogPostModel</li>
	<li>CommentModel</li>
</ul>
	<li>Views</li>
<ul>
	<li>BlogPostsView</li>
	<li>BlogPostDetailView</li>
</ul>
	<li>Helpers</li>
<ul>
	<li>…</li>
</ul>
</ul>
The ones where the developer has read Domain Driven Design, or is using Doctrine2 or Hibernate, usually have a better focus on the domain model:
<ul>
	<li>Model</li>
<ul>
	<li>Entities</li>
<ul>
	<li>BlogPost</li>
	<li>Comment</li>
	<li>User</li>
</ul>
	<li>Repositories</li>
<ul>
	<li>BlogPostRepository</li>
	<li>CommentRepository</li>
	<li>UserRepository</li>
</ul>
	<li>Services</li>
<ul>
	<li>UserService</li>
	<li>...</li>
</ul>
</ul>
</ul>
The philosophy of these folder structures is usually inspired by the frameworks they use. After all, if your framework is organized like this, it must be a best practice, right? It does make really good sense for a framework to be organized in packages [modules, components, …] like this.

For your application, it’s a missed opportunity. You are not communicating the role each class has in relation to others, or the dependencies it has. A BlogPostRepository and a CommentRepository have no direct relation to each other, apart from the fact that they are both Repositories. However, a BlogPostRepository has a very tight dependency on BlogPost.
<ul>
	<li>BlogDomain</li>
<ul>
	<li>BlogPost</li>
<ul>
	<li>BlogPost</li>
	<li>BlogPostRepository</li>
</ul>
	<li>Comment</li>
<ul>
	<li>Comment</li>
	<li>CommentRepository</li>
</ul>
</ul>
	<li>CoreDomain</li>
<ul>
	<li>User</li>
<ul>
	<li>User</li>
	<li>UserRepository</li>
</ul>
</ul>
</ul>
This makes it a lot easier to communicate bounded contexts, and to illustrate dependencies. For example, the BlogDomain depends on the CoreDomain. On a smaller scale, the BlogPost package depends on the Comment package. Zooming in even further, BlogPostRepository depends on BlogPost.

<a href="http://blog.verraes.net/wp-content/uploads/2011/10/folderstructure1.png"><img class="aligncenter size-full wp-image-113" title="folder structure" src="http://blog.verraes.net/wp-content/uploads/2011/10/folderstructure1.png" alt="" width="625" height="293" /></a>

&nbsp;

In other words: A BlogPost and a Comment know about their author. A BlogPost has zero or more Comments, but the Comments are not aware that they belong to BlogPost. A BlogPostRepository manages BlogPost entities, but those entities have no idea that they are being managed.

Obviously the whole example is too simple, as examples usually are. The point is that, to keep code clean, it’s important to think hard about coupling between elements. A folder structure aides to delineate depedencies. Close proximity in the tree suggests closer coupling. Documentation can further help to explain the direction of the coupling. We may just as well decide that Comments do know about the BlogPost they belong too, but that should be a conscious decision.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date>2011-10-22 21:49:57</wp:post_date>
		<wp:post_date_gmt>2011-10-22 19:49:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-folder-structure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="best-practice"><![CDATA[best practice]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[450681164]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[SEO Firms]]></wp:comment_author>
			<wp:comment_author_email>seonetsmartz.net@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.netsmartz.net/</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-02-01 07:34:00</wp:comment_date>
			<wp:comment_date_gmt>2012-02-01 06:34:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks this post is very useful. Keep this good work going. I must appreciate your work, you have created awesome post. I like this very much. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[426121518]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>folder structure</title>
		<link>http://blog.verraes.net/2011/10/code-folder-structure/folderstructure/</link>
		<pubDate>Sat, 22 Oct 2011 19:29:35 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/wp-content/uploads/2011/10/folderstructure.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2011-10-22 21:29:35</wp:post_date>
		<wp:post_date_gmt>2011-10-22 19:29:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>folderstructure</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>109</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.verraes.net/wp-content/uploads/2011/10/folderstructure.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/folderstructure.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"468";s:6:"height";s:3:"197";s:14:"hwstring_small";s:23:"height='53' width='128'";s:4:"file";s:27:"2011/10/folderstructure.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"folderstructure-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"folderstructure-300x126.png";s:5:"width";s:3:"300";s:6:"height";s:3:"126";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>folder structure</title>
		<link>http://blog.verraes.net/2011/10/code-folder-structure/folderstructure-2/</link>
		<pubDate>Sat, 22 Oct 2011 19:46:46 +0000</pubDate>
		<dc:creator>mathias</dc:creator>
		<guid isPermaLink="false">http://blog.verraes.net/wp-content/uploads/2011/10/folderstructure1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2011-10-22 21:46:46</wp:post_date>
		<wp:post_date_gmt>2011-10-22 19:46:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>folderstructure-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>109</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.verraes.net/wp-content/uploads/2011/10/folderstructure1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/folderstructure1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"625";s:6:"height";s:3:"293";s:14:"hwstring_small";s:23:"height='60' width='128'";s:4:"file";s:28:"2011/10/folderstructure1.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"folderstructure1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"folderstructure1-300x140.png";s:5:"width";s:3:"300";s:6:"height";s:3:"140";}s:14:"post-thumbnail";a:3:{s:4:"file";s:28:"folderstructure1-625x198.png";s:5:"width";s:3:"625";s:6:"height";s:3:"198";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
